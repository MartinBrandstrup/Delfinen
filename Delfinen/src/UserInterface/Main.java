/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Data.DataAccessorFile;
import Logic.Controller;
import Logic.Member;
import Logic.SwimmingStyle;
import static Logic.ValidatorAndFormatter.isValidDate;
import static Logic.ValidatorAndFormatter.isValidEmail;
import static Logic.ValidatorAndFormatter.formatLongToString;
import java.awt.CardLayout;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kasper Jeppesen
 */
public class Main extends javax.swing.JFrame
{

    private CardLayout card;

    private DefaultTableModel model;
    private DataAccessorFile data = new DataAccessorFile();
    private Controller c = new Controller(data);

    /**
     * Creates new form Main
     */
    public Main()
    {
        initComponents();
        card = (CardLayout) mainPanel.getLayout();
        ManageEconomyTable.getColumnModel().getColumn(1).setPreferredWidth(5);
        ManageEconomyTable.getColumnModel().getColumn(2).setPreferredWidth(5);
        ManageEconomyTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        ManageEconomyTable.getColumnModel().getColumn(6).setPreferredWidth(50);

        try
        {
            c.updateEverythingFromSource();
        }
        catch(NullPointerException npe)
        {
            System.out.println(npe);
            System.out.println("File \"Members.dat\" is empty");
        }
        catch(Exception ex)
        {
            System.out.println(ex);
        }
        populateTable();
        populateTeamsTable();
        populateEconomyTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        SeniorOrJuniorGroup = new javax.swing.ButtonGroup();
        SwimmingStyleGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        MainMenu = new javax.swing.JPanel();
        RegNewMember = new javax.swing.JButton();
        ManageMembers = new javax.swing.JButton();
        ManageTeams = new javax.swing.JButton();
        ViewTourParticipants = new javax.swing.JButton();
        ManageEconomy = new javax.swing.JButton();
        DelfinenSv√∏mmeklub = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        RegisterNewMember = new javax.swing.JPanel();
        Name = new javax.swing.JLabel();
        NameTF = new javax.swing.JTextField();
        EmailAddress = new javax.swing.JLabel();
        EmailAddressTF = new javax.swing.JTextField();
        Address = new javax.swing.JLabel();
        City = new javax.swing.JLabel();
        Phonenumber = new javax.swing.JLabel();
        DateOfBirth = new javax.swing.JLabel();
        ZipCode = new javax.swing.JLabel();
        AddressTF = new javax.swing.JTextField();
        ZipCodeTF = new javax.swing.JTextField();
        PhoneNumberTF = new javax.swing.JTextField();
        DateOfBirthTF = new javax.swing.JTextField();
        CityTF = new javax.swing.JTextField();
        ConfirmChanges = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        MainMenu1 = new javax.swing.JButton();
        SaveMembers = new javax.swing.JButton();
        Teams = new javax.swing.JPanel();
        SeniorBreaststrokeTable = new javax.swing.JScrollPane();
        BreaststrokeSeniorTable = new javax.swing.JTable();
        SeniorCrawlTable = new javax.swing.JScrollPane();
        CrawlSeniorTable = new javax.swing.JTable();
        SeniorButterflyTable = new javax.swing.JScrollPane();
        ButterflySeniorTable = new javax.swing.JTable();
        SeniorBackCrawlTable = new javax.swing.JScrollPane();
        BackCrawlSeniorTable = new javax.swing.JTable();
        JuniorCrawlTable = new javax.swing.JScrollPane();
        CrawlJuniorTable = new javax.swing.JTable();
        JuniorButterflyTable = new javax.swing.JScrollPane();
        ButterflyJuniorTable = new javax.swing.JTable();
        JuniorBackCrawlTable = new javax.swing.JScrollPane();
        BackCrawlJuniorTable = new javax.swing.JTable();
        JuniorBreaststrokeTable = new javax.swing.JScrollPane();
        BreaststrokeJuniorTable = new javax.swing.JTable();
        JuniorTeams = new javax.swing.JLabel();
        SeniorTeams = new javax.swing.JLabel();
        Breaststroke = new javax.swing.JLabel();
        Breaststroke1 = new javax.swing.JLabel();
        Crawl = new javax.swing.JLabel();
        Crawl1 = new javax.swing.JLabel();
        BackCrawl = new javax.swing.JLabel();
        BackCrawl1 = new javax.swing.JLabel();
        Butterfly = new javax.swing.JLabel();
        Butterfly1 = new javax.swing.JLabel();
        CreateTeam = new javax.swing.JButton();
        ViewTeam = new javax.swing.JButton();
        MainMenu4 = new javax.swing.JButton();
        ManageMember = new javax.swing.JPanel();
        ManMembers = new javax.swing.JLabel();
        MainMenu2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MembersTable = new javax.swing.JTable();
        RegisterNewMember1 = new javax.swing.JButton();
        CancelMembership = new javax.swing.JButton();
        MemberInfo = new javax.swing.JButton();
        MemberInformation = new javax.swing.JPanel();
        ChosenMemberName = new javax.swing.JLabel();
        MainMenu3 = new javax.swing.JButton();
        ActivityStatus = new javax.swing.JLabel();
        MemberID = new javax.swing.JLabel();
        DateOfJoing = new javax.swing.JLabel();
        MemberType = new javax.swing.JLabel();
        NextPaymentDate = new javax.swing.JLabel();
        ArrearsBalance = new javax.swing.JLabel();
        MembershipPrice = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TeamMembershipTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TournamentsParticipantsTable = new javax.swing.JTable();
        TournamentParticipants = new javax.swing.JLabel();
        TeamMembership = new javax.swing.JLabel();
        PhoneNumber1 = new javax.swing.JLabel();
        DateOfBirth1 = new javax.swing.JLabel();
        ZipCode1 = new javax.swing.JLabel();
        City1 = new javax.swing.JLabel();
        Address1 = new javax.swing.JLabel();
        EmailAddress1 = new javax.swing.JLabel();
        Name1 = new javax.swing.JLabel();
        PhoneNumberTFMI = new javax.swing.JTextField();
        DateOfBirthTFMI = new javax.swing.JTextField();
        ZipCodeTFMI = new javax.swing.JTextField();
        AddressTFMI = new javax.swing.JTextField();
        CityTFMI = new javax.swing.JTextField();
        NameTFMI = new javax.swing.JTextField();
        EmailAddressTFMI = new javax.swing.JTextField();
        TournamentEligibilityCB = new javax.swing.JCheckBox();
        ArrearsBalanceMI = new javax.swing.JLabel();
        NextPaymentDateMI = new javax.swing.JLabel();
        MembershipPriceMI = new javax.swing.JLabel();
        ActivityStatusMI = new javax.swing.JLabel();
        MemberIDMI = new javax.swing.JLabel();
        MemberTypeMI = new javax.swing.JLabel();
        DateOfJoiningMI = new javax.swing.JLabel();
        ComfirmChangesMI = new javax.swing.JButton();
        SpecificTeam = new javax.swing.JPanel();
        SpecificTeamTScroll = new javax.swing.JScrollPane();
        SpecificTeamTable = new javax.swing.JTable();
        SpecificTeamName = new javax.swing.JLabel();
        TeamTrainer = new javax.swing.JLabel();
        TeamTrainerName = new javax.swing.JLabel();
        AddNewTeamMember = new javax.swing.JButton();
        RemoveFromTeam = new javax.swing.JButton();
        MainMenu5 = new javax.swing.JButton();
        CreateANewTeam = new javax.swing.JPanel();
        ChooseSwimmingstyle = new javax.swing.JLabel();
        ChooseJorS = new javax.swing.JLabel();
        TeamName = new javax.swing.JLabel();
        TeamNameTF = new javax.swing.JTextField();
        TrainerName = new javax.swing.JLabel();
        TrainerNameTF = new javax.swing.JTextField();
        ConfirmAndCreateTeam = new javax.swing.JButton();
        JuniorRB = new javax.swing.JRadioButton();
        Senior = new javax.swing.JRadioButton();
        BreastStrokeRB = new javax.swing.JRadioButton();
        CrawlRB = new javax.swing.JRadioButton();
        BackCrawlRB = new javax.swing.JRadioButton();
        ButterflyRB = new javax.swing.JRadioButton();
        MainMenu6 = new javax.swing.JButton();
        EconomyManage = new javax.swing.JPanel();
        EconomyScrollPane = new javax.swing.JScrollPane();
        ManageEconomyTable = new javax.swing.JTable();
        Economy = new javax.swing.JLabel();
        MainMenu7 = new javax.swing.JButton();
        RegisterThisYearPayment = new javax.swing.JButton();
        RegisterArrearAsPaid = new javax.swing.JButton();
        MemberInfo1 = new javax.swing.JButton();
        TournamentsParticipants = new javax.swing.JPanel();
        EligTournamentsParticipants = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TournamentsParticipansTable = new javax.swing.JTable();
        MainMenu8 = new javax.swing.JButton();

        jMenuItem1.setText("View / change selected member info");
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Cancel membership");
        jPopupMenu1.add(jMenuItem2);

        jMenuItem3.setText("Register membership");
        jPopupMenu1.add(jMenuItem3);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setLayout(new java.awt.CardLayout());

        MainMenu.setPreferredSize(new java.awt.Dimension(610, 490));

        RegNewMember.setText("Register New Member");
        RegNewMember.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RegNewMemberActionPerformed(evt);
            }
        });

        ManageMembers.setText("Manage Members");
        ManageMembers.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageMembersActionPerformed(evt);
            }
        });

        ManageTeams.setText("Manage Teams");
        ManageTeams.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageTeamsActionPerformed(evt);
            }
        });

        ViewTourParticipants.setText("View Tournament Participants");
        ViewTourParticipants.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ViewTourParticipantsActionPerformed(evt);
            }
        });

        ManageEconomy.setText("Manage Economy");
        ManageEconomy.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageEconomyActionPerformed(evt);
            }
        });

        DelfinenSv√∏mmeklub.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        DelfinenSv√∏mmeklub.setText("Delfinen Sv√∏mmeklub");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Save to File");

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("Load from File");

        javax.swing.GroupLayout MainMenuLayout = new javax.swing.GroupLayout(MainMenu);
        MainMenu.setLayout(MainMenuLayout);
        MainMenuLayout.setHorizontalGroup(
            MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuLayout.createSequentialGroup()
                .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainMenuLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ViewTourParticipants, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ManageTeams, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ManageMembers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RegNewMember, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DelfinenSv√∏mmeklub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ManageEconomy, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(MainMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(126, 126, 126)
                        .addComponent(jButton2)))
                .addContainerGap(198, Short.MAX_VALUE))
        );
        MainMenuLayout.setVerticalGroup(
            MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(DelfinenSv√∏mmeklub)
                .addGap(39, 39, 39)
                .addComponent(RegNewMember)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ManageMembers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ManageTeams)
                .addGap(5, 5, 5)
                .addComponent(ViewTourParticipants)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ManageEconomy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 188, Short.MAX_VALUE)
                .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainMenuLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(58, 58, 58))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainMenuLayout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(39, 39, 39))))
        );

        mainPanel.add(MainMenu, "MainMenu");

        RegisterNewMember.setPreferredSize(new java.awt.Dimension(610, 490));

        Name.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Name.setText("Name:");

        EmailAddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        EmailAddress.setText("Email address: ");

        Address.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Address.setText("Address:");

        City.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        City.setText("City:");

        Phonenumber.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Phonenumber.setText("Phone number:");

        DateOfBirth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DateOfBirth.setText("Date of birth:");

        ZipCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ZipCode.setText("Zip code:");

        ConfirmChanges.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ConfirmChanges.setText("Confirm Changes");
        ConfirmChanges.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ConfirmChangesActionPerformed(evt);
            }
        });

        Reset.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ResetActionPerformed(evt);
            }
        });

        MainMenu1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MainMenu1.setText("Main Menu");
        MainMenu1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MainMenu1ActionPerformed(evt);
            }
        });

        SaveMembers.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SaveMembers.setText("Save Member");

        javax.swing.GroupLayout RegisterNewMemberLayout = new javax.swing.GroupLayout(RegisterNewMember);
        RegisterNewMember.setLayout(RegisterNewMemberLayout);
        RegisterNewMemberLayout.setHorizontalGroup(
            RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterNewMemberLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RegisterNewMemberLayout.createSequentialGroup()
                        .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EmailAddress)
                            .addComponent(Name))
                        .addGap(18, 18, 18)
                        .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(EmailAddressTF)
                            .addComponent(NameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(RegisterNewMemberLayout.createSequentialGroup()
                        .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(RegisterNewMemberLayout.createSequentialGroup()
                                            .addComponent(DateOfBirth)
                                            .addGap(27, 27, 27))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterNewMemberLayout.createSequentialGroup()
                                            .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(Reset)
                                                .addComponent(Phonenumber))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                    .addGroup(RegisterNewMemberLayout.createSequentialGroup()
                                        .addComponent(ZipCode)
                                        .addGap(56, 56, 56)))
                                .addGroup(RegisterNewMemberLayout.createSequentialGroup()
                                    .addComponent(City)
                                    .addGap(87, 87, 87)))
                            .addGroup(RegisterNewMemberLayout.createSequentialGroup()
                                .addComponent(Address)
                                .addGap(58, 58, 58)))
                        .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RegisterNewMemberLayout.createSequentialGroup()
                                .addComponent(ConfirmChanges)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                                .addComponent(SaveMembers, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(RegisterNewMemberLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(PhoneNumberTF)
                                    .addComponent(DateOfBirthTF, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ZipCodeTF, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(CityTF, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterNewMemberLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(MainMenu1))
        );
        RegisterNewMemberLayout.setVerticalGroup(
            RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterNewMemberLayout.createSequentialGroup()
                .addComponent(MainMenu1)
                .addGap(18, 18, 18)
                .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterNewMemberLayout.createSequentialGroup()
                        .addComponent(Name)
                        .addGap(18, 18, 18)
                        .addComponent(EmailAddress))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterNewMemberLayout.createSequentialGroup()
                        .addComponent(NameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EmailAddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Address)
                    .addComponent(AddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(City)
                    .addComponent(CityTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ZipCode)
                    .addComponent(ZipCodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DateOfBirthTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateOfBirth))
                .addGap(18, 18, 18)
                .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PhoneNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Phonenumber))
                .addGap(61, 61, 61)
                .addGroup(RegisterNewMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfirmChanges)
                    .addComponent(Reset)
                    .addComponent(SaveMembers))
                .addContainerGap(202, Short.MAX_VALUE))
        );

        mainPanel.add(RegisterNewMember, "RegiNewMember");

        BreaststrokeSeniorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Teams"
            }
        ));
        SeniorBreaststrokeTable.setViewportView(BreaststrokeSeniorTable);

        CrawlSeniorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Teams"
            }
        ));
        SeniorCrawlTable.setViewportView(CrawlSeniorTable);

        ButterflySeniorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Teams"
            }
        ));
        SeniorButterflyTable.setViewportView(ButterflySeniorTable);

        BackCrawlSeniorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Teams"
            }
        ));
        SeniorBackCrawlTable.setViewportView(BackCrawlSeniorTable);

        CrawlJuniorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Teams"
            }
        ));
        JuniorCrawlTable.setViewportView(CrawlJuniorTable);

        ButterflyJuniorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Teams"
            }
        ));
        JuniorButterflyTable.setViewportView(ButterflyJuniorTable);

        BackCrawlJuniorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Teams"
            }
        ));
        JuniorBackCrawlTable.setViewportView(BackCrawlJuniorTable);

        BreaststrokeJuniorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Teams"
            }
        ));
        JuniorBreaststrokeTable.setViewportView(BreaststrokeJuniorTable);

        JuniorTeams.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        JuniorTeams.setText("Junior teams:");

        SeniorTeams.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        SeniorTeams.setText("Senior teams:");

        Breaststroke.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Breaststroke.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Breaststroke.setText("Breasstroke:");

        Breaststroke1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Breaststroke1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Breaststroke1.setText("Breasstroke:");

        Crawl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Crawl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Crawl.setText("Crawl:");

        Crawl1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Crawl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Crawl1.setText("Crawl:");

        BackCrawl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        BackCrawl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BackCrawl.setText("Back crawl:");

        BackCrawl1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        BackCrawl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BackCrawl1.setText("Back crawl:");

        Butterfly.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Butterfly.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Butterfly.setText("Butterfly");

        Butterfly1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Butterfly1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Butterfly1.setText("Butterfly");

        CreateTeam.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CreateTeam.setText("Create a new Team");
        CreateTeam.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CreateTeamActionPerformed(evt);
            }
        });

        ViewTeam.setText("View Team");
        ViewTeam.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ViewTeamActionPerformed(evt);
            }
        });

        MainMenu4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MainMenu4.setText("Main Menu");
        MainMenu4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MainMenu4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TeamsLayout = new javax.swing.GroupLayout(Teams);
        Teams.setLayout(TeamsLayout);
        TeamsLayout.setHorizontalGroup(
            TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamsLayout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(JuniorTeams)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainMenu4))
            .addGroup(TeamsLayout.createSequentialGroup()
                .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, TeamsLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(JuniorBreaststrokeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, TeamsLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(ViewTeam))
                    .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Breaststroke1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SeniorBreaststrokeTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                    .addComponent(Breaststroke, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TeamsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(SeniorTeams))
                    .addGroup(TeamsLayout.createSequentialGroup()
                        .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SeniorCrawlTable, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(Crawl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BackCrawl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SeniorBackCrawlTable, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SeniorButterflyTable, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(Butterfly1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(TeamsLayout.createSequentialGroup()
                        .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(JuniorCrawlTable, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(Crawl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BackCrawl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JuniorBackCrawlTable, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Butterfly, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(JuniorButterflyTable, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addGroup(TeamsLayout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(CreateTeam)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        TeamsLayout.setVerticalGroup(
            TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamsLayout.createSequentialGroup()
                .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(TeamsLayout.createSequentialGroup()
                        .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JuniorTeams)
                            .addComponent(MainMenu4))
                        .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TeamsLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BackCrawl)
                                    .addComponent(Butterfly)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Crawl)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JuniorBackCrawlTable, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JuniorCrawlTable, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JuniorButterflyTable, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(TeamsLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(Breaststroke)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JuniorBreaststrokeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TeamsLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(SeniorTeams))
                    .addGroup(TeamsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ViewTeam)))
                .addGap(3, 3, 3)
                .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Breaststroke1)
                    .addComponent(Crawl1)
                    .addComponent(BackCrawl1)
                    .addComponent(Butterfly1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SeniorBreaststrokeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SeniorCrawlTable, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(SeniorButterflyTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                        .addComponent(SeniorBackCrawlTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addComponent(CreateTeam)
                .addContainerGap())
        );

        mainPanel.add(Teams, "Teams");

        ManageMember.setPreferredSize(new java.awt.Dimension(610, 490));

        ManMembers.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        ManMembers.setText("Manage members");

        MainMenu2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MainMenu2.setText("Main Menu");
        MainMenu2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MainMenu2ActionPerformed(evt);
            }
        });

        MembersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Name", "MID", "Status", "Member Type"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        MembersTable.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                MembersTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(MembersTable);

        RegisterNewMember1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        RegisterNewMember1.setText("Register new member");
        RegisterNewMember1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RegisterNewMember1ActionPerformed(evt);
            }
        });

        CancelMembership.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CancelMembership.setText("Cancel membership");

        MemberInfo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MemberInfo.setText("View/change member info");
        MemberInfo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MemberInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ManageMemberLayout = new javax.swing.GroupLayout(ManageMember);
        ManageMember.setLayout(ManageMemberLayout);
        ManageMemberLayout.setHorizontalGroup(
            ManageMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManageMemberLayout.createSequentialGroup()
                .addContainerGap(137, Short.MAX_VALUE)
                .addComponent(ManMembers)
                .addGap(18, 18, 18)
                .addComponent(MainMenu2))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(MemberInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(ManageMemberLayout.createSequentialGroup()
                .addComponent(RegisterNewMember1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CancelMembership))
        );
        ManageMemberLayout.setVerticalGroup(
            ManageMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManageMemberLayout.createSequentialGroup()
                .addGroup(ManageMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MainMenu2)
                    .addComponent(ManMembers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ManageMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CancelMembership)
                    .addComponent(RegisterNewMember1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MemberInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(ManageMember, "MembersManage");

        MemberInformation.setPreferredSize(new java.awt.Dimension(610, 490));

        ChosenMemberName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ChosenMemberName.setText("-----------------");

        MainMenu3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MainMenu3.setText("Main Menu");
        MainMenu3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MainMenu3ActionPerformed(evt);
            }
        });

        ActivityStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ActivityStatus.setText("Activity status:");

        MemberID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        MemberID.setText("Member ID:");

        DateOfJoing.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DateOfJoing.setText("Date of joining:");

        MemberType.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        MemberType.setText("Member type:");

        NextPaymentDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        NextPaymentDate.setText("Next payment date:");

        ArrearsBalance.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ArrearsBalance.setText("Arrears balance:");

        MembershipPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        MembershipPrice.setText("Membership price:");

        TeamMembershipTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Team name", "Swimming style", "Date of joining", "Date of leaving"
            }
        ));
        jScrollPane3.setViewportView(TeamMembershipTable);

        TournamentsParticipantsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Event name", "Event date", "Ranking", "Swimming style", "Time"
            }
        ));
        jScrollPane4.setViewportView(TournamentsParticipantsTable);

        TournamentParticipants.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TournamentParticipants.setText("Tournaments participants");

        TeamMembership.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TeamMembership.setText("Team membership");

        PhoneNumber1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PhoneNumber1.setText("Phone number:");

        DateOfBirth1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DateOfBirth1.setText("Date of birth:");

        ZipCode1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ZipCode1.setText("Zip code:");

        City1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        City1.setText("City::");

        Address1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Address1.setText("Address:");

        EmailAddress1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        EmailAddress1.setText("Email Address:");

        Name1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Name1.setText("Name:");

        PhoneNumberTFMI.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        DateOfBirthTFMI.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        ZipCodeTFMI.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        AddressTFMI.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        CityTFMI.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        NameTFMI.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        EmailAddressTFMI.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        TournamentEligibilityCB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TournamentEligibilityCB.setText("Tournament eligibility");

        ArrearsBalanceMI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ArrearsBalanceMI.setText("e");

        NextPaymentDateMI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        NextPaymentDateMI.setText("f");

        MembershipPriceMI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        MembershipPriceMI.setText("g");
        MembershipPriceMI.setToolTipText("");

        ActivityStatusMI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ActivityStatusMI.setText("b");

        MemberIDMI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        MemberIDMI.setText("a");

        MemberTypeMI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        MemberTypeMI.setText("c");

        DateOfJoiningMI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        DateOfJoiningMI.setText("d");

        ComfirmChangesMI.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ComfirmChangesMI.setText("Comfirm changes");
        ComfirmChangesMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ComfirmChangesMIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MemberInformationLayout = new javax.swing.GroupLayout(MemberInformation);
        MemberInformation.setLayout(MemberInformationLayout);
        MemberInformationLayout.setHorizontalGroup(
            MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MemberInformationLayout.createSequentialGroup()
                .addComponent(ChosenMemberName, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainMenu3))
            .addComponent(jScrollPane3)
            .addComponent(jScrollPane4)
            .addGroup(MemberInformationLayout.createSequentialGroup()
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MemberInformationLayout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(TournamentParticipants))
                    .addGroup(MemberInformationLayout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(TeamMembership))
                    .addGroup(MemberInformationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NextPaymentDate)
                            .addComponent(ArrearsBalance))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NextPaymentDateMI, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ArrearsBalanceMI, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MemberInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(MemberInformationLayout.createSequentialGroup()
                        .addComponent(MembershipPrice)
                        .addGap(18, 18, 18)
                        .addComponent(MembershipPriceMI, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TournamentEligibilityCB)
                        .addGap(8, 8, 8))
                    .addGroup(MemberInformationLayout.createSequentialGroup()
                        .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MemberInformationLayout.createSequentialGroup()
                                .addGap(273, 273, 273)
                                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DateOfBirth1)
                                    .addComponent(PhoneNumber1)))
                            .addGroup(MemberInformationLayout.createSequentialGroup()
                                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MemberID)
                                    .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ActivityStatus, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(MemberType))
                                    .addComponent(DateOfJoing, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(MemberIDMI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ActivityStatusMI, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                                    .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(DateOfJoiningMI, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                        .addComponent(MemberTypeMI, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(28, 28, 28)
                                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ZipCode1)
                                    .addComponent(Address1)
                                    .addComponent(EmailAddress1)
                                    .addComponent(City1)
                                    .addComponent(Name1))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PhoneNumberTFMI, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addComponent(DateOfBirthTFMI, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ZipCodeTFMI, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CityTFMI, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AddressTFMI, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(EmailAddressTFMI)
                            .addComponent(NameTFMI, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(MemberInformationLayout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(ComfirmChangesMI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(41, 41, 41))
        );
        MemberInformationLayout.setVerticalGroup(
            MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MemberInformationLayout.createSequentialGroup()
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChosenMemberName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MainMenu3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(NameTFMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Name1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ActivityStatusMI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ActivityStatus)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(MemberInformationLayout.createSequentialGroup()
                        .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmailAddress1)
                            .addComponent(EmailAddressTFMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Address1)
                            .addComponent(AddressTFMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(MemberInformationLayout.createSequentialGroup()
                        .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MemberIDMI, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MemberID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MemberTypeMI)
                            .addComponent(MemberType, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(City1)
                        .addComponent(CityTFMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DateOfJoiningMI)
                        .addComponent(DateOfJoing)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ZipCode1)
                    .addComponent(ZipCodeTFMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateOfBirth1)
                    .addComponent(DateOfBirthTFMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PhoneNumber1)
                    .addComponent(PhoneNumberTFMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ComfirmChangesMI)
                .addGap(15, 15, 15)
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArrearsBalance)
                    .addComponent(ArrearsBalanceMI, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NextPaymentDate)
                    .addComponent(NextPaymentDateMI, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TournamentEligibilityCB)
                    .addGroup(MemberInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MembershipPrice)
                        .addComponent(MembershipPriceMI, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(TeamMembership)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TournamentParticipants)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(MemberInformation, "MemberInformation");

        SpecificTeam.setPreferredSize(new java.awt.Dimension(610, 490));

        SpecificTeamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Name", "MID", "Best Time", "Date of Best Time"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        SpecificTeamTScroll.setViewportView(SpecificTeamTable);

        SpecificTeamName.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        SpecificTeamName.setText("----------------------------");

        TeamTrainer.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        TeamTrainer.setText("Team Trainer:");

        TeamTrainerName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        TeamTrainerName.setText("--------------------------");

        AddNewTeamMember.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        AddNewTeamMember.setText("Add new team member");

        RemoveFromTeam.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        RemoveFromTeam.setText("Remove from team");

        MainMenu5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MainMenu5.setText("Main Menu");
        MainMenu5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MainMenu5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SpecificTeamLayout = new javax.swing.GroupLayout(SpecificTeam);
        SpecificTeam.setLayout(SpecificTeamLayout);
        SpecificTeamLayout.setHorizontalGroup(
            SpecificTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SpecificTeamTScroll)
            .addGroup(SpecificTeamLayout.createSequentialGroup()
                .addGroup(SpecificTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SpecificTeamLayout.createSequentialGroup()
                        .addComponent(AddNewTeamMember)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RemoveFromTeam))
                    .addGroup(SpecificTeamLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(SpecificTeamName)
                        .addGap(18, 18, 18)
                        .addComponent(MainMenu5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(SpecificTeamLayout.createSequentialGroup()
                .addComponent(TeamTrainer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TeamTrainerName)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        SpecificTeamLayout.setVerticalGroup(
            SpecificTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SpecificTeamLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(SpecificTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SpecificTeamName)
                    .addComponent(MainMenu5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SpecificTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TeamTrainer)
                    .addComponent(TeamTrainerName))
                .addGap(18, 18, 18)
                .addComponent(SpecificTeamTScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SpecificTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddNewTeamMember)
                    .addComponent(RemoveFromTeam))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(SpecificTeam, "SpecificTeam");

        CreateANewTeam.setPreferredSize(new java.awt.Dimension(610, 490));

        ChooseSwimmingstyle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ChooseSwimmingstyle.setText("Choose a swimming style:");

        ChooseJorS.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ChooseJorS.setText("Choose junior or senior:");

        TeamName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        TeamName.setText("Team name:");

        TrainerName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        TrainerName.setText("Trainer name:");

        ConfirmAndCreateTeam.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ConfirmAndCreateTeam.setText("Confirm and create team");
        ConfirmAndCreateTeam.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ConfirmAndCreateTeamActionPerformed(evt);
            }
        });

        SeniorOrJuniorGroup.add(JuniorRB);
        JuniorRB.setText("Junior");

        SeniorOrJuniorGroup.add(Senior);
        Senior.setText("Senior");

        SwimmingStyleGroup.add(BreastStrokeRB);
        BreastStrokeRB.setText("Breaststroke");

        SwimmingStyleGroup.add(CrawlRB);
        CrawlRB.setText("Crawl");

        SwimmingStyleGroup.add(BackCrawlRB);
        BackCrawlRB.setText("Back crawl");

        SwimmingStyleGroup.add(ButterflyRB);
        ButterflyRB.setText("Butterfly");

        MainMenu6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MainMenu6.setText("Main menu");
        MainMenu6.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MainMenu6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CreateANewTeamLayout = new javax.swing.GroupLayout(CreateANewTeam);
        CreateANewTeam.setLayout(CreateANewTeamLayout);
        CreateANewTeamLayout.setHorizontalGroup(
            CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateANewTeamLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfirmAndCreateTeam)
                    .addGroup(CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(CreateANewTeamLayout.createSequentialGroup()
                            .addComponent(TrainerName)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(TrainerNameTF))
                        .addGroup(CreateANewTeamLayout.createSequentialGroup()
                            .addComponent(TeamName)
                            .addGap(18, 18, 18)
                            .addComponent(TeamNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(CreateANewTeamLayout.createSequentialGroup()
                        .addGroup(CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ChooseSwimmingstyle)
                            .addComponent(BreastStrokeRB)
                            .addComponent(CrawlRB)
                            .addComponent(BackCrawlRB))
                        .addGap(49, 49, 49)
                        .addGroup(CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ChooseJorS)
                            .addComponent(Senior)
                            .addComponent(JuniorRB)))
                    .addComponent(ButterflyRB))
                .addContainerGap(83, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateANewTeamLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(MainMenu6))
        );
        CreateANewTeamLayout.setVerticalGroup(
            CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateANewTeamLayout.createSequentialGroup()
                .addComponent(MainMenu6)
                .addGap(41, 41, 41)
                .addGroup(CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChooseSwimmingstyle)
                    .addComponent(ChooseJorS))
                .addGap(29, 29, 29)
                .addGroup(CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateANewTeamLayout.createSequentialGroup()
                        .addComponent(BreastStrokeRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CrawlRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BackCrawlRB))
                    .addGroup(CreateANewTeamLayout.createSequentialGroup()
                        .addComponent(JuniorRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Senior)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ButterflyRB)
                .addGap(61, 61, 61)
                .addGroup(CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TeamName)
                    .addComponent(TeamNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(CreateANewTeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TrainerName)
                    .addComponent(TrainerNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(ConfirmAndCreateTeam)
                .addGap(54, 54, 54))
        );

        mainPanel.add(CreateANewTeam, "CreateATeam");

        EconomyManage.setPreferredSize(new java.awt.Dimension(610, 490));

        ManageEconomyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Name", "MID", "Age", "Arrear", "Payment Date", "Membership Price", "Paid current year"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        EconomyScrollPane.setViewportView(ManageEconomyTable);

        Economy.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        Economy.setText("Economy");

        MainMenu7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MainMenu7.setText("Main menu");
        MainMenu7.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MainMenu7ActionPerformed(evt);
            }
        });

        RegisterThisYearPayment.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        RegisterThisYearPayment.setText("Register payment for this year");

        RegisterArrearAsPaid.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        RegisterArrearAsPaid.setText("Register arrears as paid");

        MemberInfo1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MemberInfo1.setText("View/change member info");
        MemberInfo1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MemberInfo1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EconomyManageLayout = new javax.swing.GroupLayout(EconomyManage);
        EconomyManage.setLayout(EconomyManageLayout);
        EconomyManageLayout.setHorizontalGroup(
            EconomyManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(EconomyScrollPane)
            .addGroup(EconomyManageLayout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(Economy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainMenu7))
            .addGroup(EconomyManageLayout.createSequentialGroup()
                .addComponent(RegisterThisYearPayment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                .addComponent(RegisterArrearAsPaid))
            .addComponent(MemberInfo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        EconomyManageLayout.setVerticalGroup(
            EconomyManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EconomyManageLayout.createSequentialGroup()
                .addGroup(EconomyManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Economy)
                    .addComponent(MainMenu7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EconomyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EconomyManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegisterThisYearPayment)
                    .addComponent(RegisterArrearAsPaid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MemberInfo1)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        mainPanel.add(EconomyManage, "ManageEconomy");

        TournamentsParticipants.setPreferredSize(new java.awt.Dimension(610, 490));

        EligTournamentsParticipants.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        EligTournamentsParticipants.setText("Eligible Tournament Participants");

        TournamentsParticipansTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Name", "MID", "Team", "Best Time", "Date of Best Time", "Swimming Style"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(TournamentsParticipansTable);

        MainMenu8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MainMenu8.setText("Main menu");
        MainMenu8.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MainMenu8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TournamentsParticipantsLayout = new javax.swing.GroupLayout(TournamentsParticipants);
        TournamentsParticipants.setLayout(TournamentsParticipantsLayout);
        TournamentsParticipantsLayout.setHorizontalGroup(
            TournamentsParticipantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TournamentsParticipantsLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(EligTournamentsParticipants)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainMenu8))
            .addComponent(jScrollPane5)
        );
        TournamentsParticipantsLayout.setVerticalGroup(
            TournamentsParticipantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TournamentsParticipantsLayout.createSequentialGroup()
                .addGroup(TournamentsParticipantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TournamentsParticipantsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(EligTournamentsParticipants))
                    .addComponent(MainMenu8))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE))
        );

        mainPanel.add(TournamentsParticipants, "EligTourParticipants");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MembersTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_MembersTableMouseReleased
    {//GEN-HEADEREND:event_MembersTableMouseReleased
        //Mouse Released is apperantly equal to mouse right click???? 
        if(evt.isPopupTrigger()) //If this event is triggrede (java.awt.event.Mouse event evt) - the parameter for this method
        {
            jPopupMenu1.show(this, evt.getX(), evt.getY()); //show the popup at memberstable at this event x,y cordinates
        }
    }//GEN-LAST:event_MembersTableMouseReleased

    private void MainMenu2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MainMenu2ActionPerformed
    {//GEN-HEADEREND:event_MainMenu2ActionPerformed
        mainMenu();
    }//GEN-LAST:event_MainMenu2ActionPerformed

    private void RegisterNewMember1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RegisterNewMember1ActionPerformed
    {//GEN-HEADEREND:event_RegisterNewMember1ActionPerformed
        card.show(mainPanel, "RegiNewMember");
    }//GEN-LAST:event_RegisterNewMember1ActionPerformed

    private void MemberInfoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MemberInfoActionPerformed
    {//GEN-HEADEREND:event_MemberInfoActionPerformed
        memberInfo();
        card.show(mainPanel, "MemberInformation");
    }//GEN-LAST:event_MemberInfoActionPerformed

    private void MainMenu3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MainMenu3ActionPerformed
    {//GEN-HEADEREND:event_MainMenu3ActionPerformed
        mainMenu();
    }//GEN-LAST:event_MainMenu3ActionPerformed

    private void MainMenu5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MainMenu5ActionPerformed
    {//GEN-HEADEREND:event_MainMenu5ActionPerformed
        mainMenu(); 
    }//GEN-LAST:event_MainMenu5ActionPerformed

    private void MainMenu7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MainMenu7ActionPerformed
    {//GEN-HEADEREND:event_MainMenu7ActionPerformed
        mainMenu();
    }//GEN-LAST:event_MainMenu7ActionPerformed

    private void MemberInfo1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MemberInfo1ActionPerformed
    {//GEN-HEADEREND:event_MemberInfo1ActionPerformed
        EconMemInfo();
        card.show(mainPanel, "MemberInformation");
    }//GEN-LAST:event_MemberInfo1ActionPerformed

    private void MainMenu8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MainMenu8ActionPerformed
    {//GEN-HEADEREND:event_MainMenu8ActionPerformed
        mainMenu();
    }//GEN-LAST:event_MainMenu8ActionPerformed

    private void ViewTeamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ViewTeamActionPerformed
    {//GEN-HEADEREND:event_ViewTeamActionPerformed
        populateSpecificTeamTable();
        card.show(mainPanel, "SpecificTeam");
    }//GEN-LAST:event_ViewTeamActionPerformed

    private void CreateTeamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CreateTeamActionPerformed
    {//GEN-HEADEREND:event_CreateTeamActionPerformed
        card.show(mainPanel, "CreateATeam");
    }//GEN-LAST:event_CreateTeamActionPerformed

    private void MainMenu4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MainMenu4ActionPerformed
    {//GEN-HEADEREND:event_MainMenu4ActionPerformed
        mainMenu();
    }//GEN-LAST:event_MainMenu4ActionPerformed

    private void MainMenu1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MainMenu1ActionPerformed
    {//GEN-HEADEREND:event_MainMenu1ActionPerformed
        mainMenu();
    }//GEN-LAST:event_MainMenu1ActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ResetActionPerformed
    {//GEN-HEADEREND:event_ResetActionPerformed
        reset();
    }//GEN-LAST:event_ResetActionPerformed

    private void ConfirmChangesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ConfirmChangesActionPerformed
    {//GEN-HEADEREND:event_ConfirmChangesActionPerformed

        int zipCode = Integer.parseInt(this.ZipCodeTF.getText());
        long phoneNumber = Long.parseLong(this.PhoneNumberTF.getText());
        String name = this.NameTF.getText();
        String address = this.AddressTF.getText();
        String city = this.CityTF.getText();
        String email = this.EmailAddressTF.getText();
        //LocalDate dateOfBirth = LocalDate.parse(this.DateOfBirthTF.getText()); //works if string is formatted like localdate (ex 2016-08-16)

        String dateOfBirthString = this.DateOfBirthTF.getText();
        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("d/MM/yyyy");

        if(memberInfoValidation() == false)
        {
            return;
        }

        LocalDate dateOfBirth = LocalDate.parse(dateOfBirthString, dateFormat);

        try
        {
            c.registerNewMember(zipCode, phoneNumber, name, address, city, email, dateOfBirth);
        }
        catch(IllegalArgumentException iae)
        {
            JOptionPane.showMessageDialog(null, "One or more data fields return invalid data", "Inane error", JOptionPane.ERROR_MESSAGE);
        }
        System.out.print("MemberList size: " + c.getMemberList().size());

        try
        {
            // should be removed from this methid at some point in time
            c.saveMemberList();
        }
        catch(Exception ex)
        {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

        model = (DefaultTableModel) MembersTable.getModel(); //Hver lige opm√¶rksom p√• om denne her √∏del√¶gger det

        Object rowData[] = new Object[4];

        rowData[0] = c.getLastAddedMember().getName();
        rowData[1] = c.getLastAddedMember().getMemberID();
        rowData[2] = c.getLastAddedMember().getActivityStatusString();
        rowData[3] = c.getLastAddedMember().getCompetitiveSwimmerString();
        model.addRow(rowData);
        reset();
    }//GEN-LAST:event_ConfirmChangesActionPerformed

    private void MainMenu6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MainMenu6ActionPerformed
    {//GEN-HEADEREND:event_MainMenu6ActionPerformed
        mainMenu();
    }//GEN-LAST:event_MainMenu6ActionPerformed

    private void ConfirmAndCreateTeamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ConfirmAndCreateTeamActionPerformed
    {//GEN-HEADEREND:event_ConfirmAndCreateTeamActionPerformed
        boolean isJunior = false; // kan man initialize den p√• en anden m√•de?? MLB: booleans er false som default
        SwimmingStyle swimmingStyle = null;

        String teamName = this.TeamNameTF.getText();
        String trainer = this.TrainerNameTF.getText();

        if(BreastStrokeRB.isSelected())
        {
            swimmingStyle = SwimmingStyle.BREASTSTROKE;
        }
        if(CrawlRB.isSelected())
        {
            swimmingStyle = SwimmingStyle.CRAWL;
        }
        if(BackCrawlRB.isSelected())
        {
            swimmingStyle = SwimmingStyle.BACKCRAWL;
        }
        if(ButterflyRB.isSelected())
        {
            swimmingStyle = SwimmingStyle.BUTTERFLY;
        }

        if(JuniorRB.isSelected())
        {
            isJunior = true;
        }
        if(Senior.isSelected())
        {
            isJunior = false;
        }

        if(SeniorOrJuniorGroup.getSelection() != null && SwimmingStyleGroup != null)
        {
            c.createTeam(isJunior, teamName, trainer, swimmingStyle);
            System.out.print("Team has been created");
        }
        else
        {
            System.out.print("You need to pick atleast one swimming style and either junior or senior");
        }

        try
        {
            c.saveTeamList();
        }
        catch (Exception ex)
        {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

        lastTeamAddedTable(); //is choosing which table the field model appear as

        Object rowData[] = new Object[1];

        rowData[0] = c.getLastAddedTeam().getTeamName();
        model.addRow(rowData);
    }//GEN-LAST:event_ConfirmAndCreateTeamActionPerformed

    private void ManageEconomyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManageEconomyActionPerformed
    {//GEN-HEADEREND:event_ManageEconomyActionPerformed
        card.show(mainPanel, "ManageEconomy");
    }//GEN-LAST:event_ManageEconomyActionPerformed

    private void ViewTourParticipantsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ViewTourParticipantsActionPerformed
    {//GEN-HEADEREND:event_ViewTourParticipantsActionPerformed
        card.show(mainPanel, "EligTourParticipants");
    }//GEN-LAST:event_ViewTourParticipantsActionPerformed

    private void ManageTeamsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManageTeamsActionPerformed
    {//GEN-HEADEREND:event_ManageTeamsActionPerformed
        card.show(mainPanel, "Teams");
    }//GEN-LAST:event_ManageTeamsActionPerformed

    private void ManageMembersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManageMembersActionPerformed
    {//GEN-HEADEREND:event_ManageMembersActionPerformed
        card.show(mainPanel, "MembersManage");
    }//GEN-LAST:event_ManageMembersActionPerformed

    private void RegNewMemberActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RegNewMemberActionPerformed
    {//GEN-HEADEREND:event_RegNewMemberActionPerformed
        card.show(mainPanel, "RegiNewMember");
    }//GEN-LAST:event_RegNewMemberActionPerformed

    private void ComfirmChangesMIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ComfirmChangesMIActionPerformed
    {//GEN-HEADEREND:event_ComfirmChangesMIActionPerformed
        int i = rowSelected();
        
        Member member = c.getMemberList().get(i);
        
        
        
        
    }//GEN-LAST:event_ComfirmChangesMIActionPerformed

    public boolean memberInfoValidation()
    {
        boolean allOK = true;
        int zipCode = Integer.parseInt(this.ZipCodeTF.getText());
        long phoneNumber = Long.parseLong(this.PhoneNumberTF.getText());
        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("d/MM/yyyy");

        if(zipCode < 1000 || zipCode > 9999)
        {
            JOptionPane.showMessageDialog(null, "The field zip must contains excalty 4 digits", "Inane error", JOptionPane.ERROR_MESSAGE);
            allOK = false;
        }
        if(phoneNumber < 10000000 || phoneNumber > 99999999)
        {
            JOptionPane.showMessageDialog(null, "The field phone number must contains excalty 8 digits", "Inane error", JOptionPane.ERROR_MESSAGE);
            allOK = false;
        }
        if(this.NameTF.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "The field name cannot be empty", "Inane error", JOptionPane.ERROR_MESSAGE);
            allOK = false;
        }
        if(this.AddressTF.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "The field address cannot be empty", "Inane error", JOptionPane.ERROR_MESSAGE);
            allOK = false;
        }
        if(this.CityTF.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "The field city cannot be empty", "Inane error", JOptionPane.ERROR_MESSAGE);
            allOK = false;
        }

        if(isValidEmail(this.EmailAddressTF.getText()) == false)
        {
            JOptionPane.showMessageDialog(null, "This email address is not valid", "Inane error", JOptionPane.ERROR_MESSAGE);
            allOK = false;
        }
        
        if(isValidDate(this.DateOfBirthTF.getText(), dateFormat) == false)
        {
            JOptionPane.showMessageDialog(null, "This date is not valid", "Inane error", JOptionPane.ERROR_MESSAGE);
            allOK = false;
        }
        return allOK;
    }

    public void reset()
    {
        this.ZipCodeTF.setText("");
        this.PhoneNumberTF.setText("");
        this.NameTF.setText("");
        this.AddressTF.setText("");
        this.CityTF.setText("");
        this.EmailAddressTF.setText("");
        this.DateOfBirthTF.setText("");
    }

    public void populateTable()
    {
        model = (DefaultTableModel) MembersTable.getModel();
        System.out.print("MemberList size is: " + c.getMemberList().size());

        Object rowData[] = new Object[4];

        for(int i = 0; i < c.getMemberList().size(); ++i)
        {

            rowData[0] = c.getMemberList().get(i).getName();
            rowData[1] = c.getMemberList().get(i).getMemberID();
            rowData[2] = c.getMemberList().get(i).getActivityStatusString();
            rowData[3] = c.getMemberList().get(i).getCompetitiveSwimmerString();
            model.addRow(rowData);
        }
    }
    
    public void populateTeamsTable()
    {   
        Object rowData[] = new Object[1];
        System.out.print("Size of teamList: " + c.getTeamList().size());
        for(int i = 0; i < c.getTeamList().size(); ++i)
        {
            rowData[0] = c.getTeamList().get(i).getTeamName();
            
            if(c.getTeamList().get(i).getSwimmingStyle() == SwimmingStyle.BREASTSTROKE)
            {
                if(c.getTeamList().get(i).getIsJuniorTeam())
                {
                    model = (DefaultTableModel) BreaststrokeJuniorTable.getModel();
                    model.addRow(rowData);   
                }
                else
                {
                    model = (DefaultTableModel) BreaststrokeSeniorTable.getModel();
                    model.addRow(rowData); 
                }
            }
            if(c.getTeamList().get(i).getSwimmingStyle() == SwimmingStyle.CRAWL)
            {
                if(c.getTeamList().get(i).getIsJuniorTeam())
                {
                    model = (DefaultTableModel) CrawlJuniorTable.getModel();
                    model.addRow(rowData);   
                }
                else
                {
                    model = (DefaultTableModel) CrawlSeniorTable.getModel();
                    model.addRow(rowData); 
                    //Det er en test
                }
            }
            if(c.getTeamList().get(i).getSwimmingStyle() == SwimmingStyle.BACKCRAWL)
            {
                if(c.getTeamList().get(i).getIsJuniorTeam())
                {
                    model = (DefaultTableModel) BackCrawlJuniorTable.getModel();
                    model.addRow(rowData);   
                }
                else
                {
                    model = (DefaultTableModel) BackCrawlSeniorTable.getModel();
                    model.addRow(rowData); 
                }
            }
            if(c.getTeamList().get(i).getSwimmingStyle() == SwimmingStyle.BUTTERFLY)
            {
                if(c.getTeamList().get(i).getIsJuniorTeam())
                {
                    model = (DefaultTableModel) ButterflyJuniorTable.getModel();
                    model.addRow(rowData);   
                }
                else
                {
                    model = (DefaultTableModel) ButterflySeniorTable.getModel();
                    model.addRow(rowData); 
                }
            }
        }
    }

    public void populateSpecificTeamTable()
    {
        model = (DefaultTableModel) SpecificTeamTable.getModel();
        System.out.print(c.getTeamList().size());
        Object rowData[] = new Object[4];
        int rowSelectedIndex = rowSelectedBreaststrokeJunior();
        
        for(int i = 0; i < c.getTeamList().size(); ++i)
        {
            System.out.print("Memberlist size: " + c.getTeamList().get(i).getTeamMembers().size());
            if(BreaststrokeJuniorTable.getModel().getValueAt(rowSelectedIndex, 0).toString().equals(c.getTeamList().get(i).getTeamName()))
            {
                
                if(c.getTeamList().get(i).getTeamMembers().isEmpty())
                {
                    System.out.print("Memberlist size: " + c.getTeamList().get(i).getTeamMembers().size());
                }
                else
                {
                     for(int n = 0; n < c.getTeamList().get(i).getTeamMembers().size(); ++n)
                    {
                        rowData[0] = c.getTeamList().get(i).getTeamMembers().get(n).getName();
                        rowData[1] = c.getTeamList().get(i).getTeamMembers().get(n).getMemberID();
                        rowData[2] = c.getTeamList().get(i).getTeamMembers().get(n).getResultByStyle("BREASTSTROKE").getResult();
                        rowData[3] = c.getTeamList().get(i).getTeamMembers().get(n).getResultByStyle("BREASTSTROKE").getDate();
                        model.addRow(rowData);
                    } 
                }
            }
        } 
    }
    
    public void populateEconomyTable()
    {
        model = (DefaultTableModel) ManageEconomyTable.getModel();

        Object rowData[] = new Object[7];

        for(int i = 0; i < c.getMemberList().size(); ++i)
        {
            rowData[0] = c.getMemberList().get(i).getName();
            rowData[1] = c.getMemberList().get(i).getMemberID();
            rowData[2] = c.getMemberList().get(i).getAge();
            rowData[3] = c.getMemberList().get(i).getArrearsBalance();
            rowData[4] = c.getMemberList().get(i).getNextPaymentDate();
            rowData[5] = c.getMemberList().get(i).getMembershipPrice();
            rowData[6] = c.getMemberList().get(i).hasPaidCurrentYear();
            model.addRow(rowData);
        }
    }
    
    
    public void lastTeamAddedTable()
    {
        if(c.getLastAddedTeam().getSwimmingStyle() == SwimmingStyle.BREASTSTROKE && c.getLastAddedTeam().getIsJuniorTeam() == true)
        {
            model = (DefaultTableModel) BreaststrokeJuniorTable.getModel();
        }
        if(c.getLastAddedTeam().getSwimmingStyle() == SwimmingStyle.BREASTSTROKE && c.getLastAddedTeam().getIsJuniorTeam() == false)
        {
            model = (DefaultTableModel) BreaststrokeSeniorTable.getModel();
        }
        if(c.getLastAddedTeam().getSwimmingStyle() == SwimmingStyle.CRAWL && c.getLastAddedTeam().getIsJuniorTeam() == true)
        {
            model = (DefaultTableModel) CrawlJuniorTable.getModel();
        }
        if(c.getLastAddedTeam().getSwimmingStyle() == SwimmingStyle.CRAWL && c.getLastAddedTeam().getIsJuniorTeam() == false)
        {
            model = (DefaultTableModel) CrawlSeniorTable.getModel();
        }
        if(c.getLastAddedTeam().getSwimmingStyle() == SwimmingStyle.BACKCRAWL && c.getLastAddedTeam().getIsJuniorTeam() == true)
        {
            model = (DefaultTableModel) BackCrawlJuniorTable.getModel();
        }
        if(c.getLastAddedTeam().getSwimmingStyle() == SwimmingStyle.BACKCRAWL && c.getLastAddedTeam().getIsJuniorTeam() == false)
        {
            model = (DefaultTableModel) BackCrawlSeniorTable.getModel();
        }
        if(c.getLastAddedTeam().getSwimmingStyle() == SwimmingStyle.BUTTERFLY && c.getLastAddedTeam().getIsJuniorTeam() == true)
        {
            model = (DefaultTableModel) ButterflyJuniorTable.getModel();
        }
        if(c.getLastAddedTeam().getSwimmingStyle() == SwimmingStyle.BUTTERFLY && c.getLastAddedTeam().getIsJuniorTeam() == false)
        {
            model = (DefaultTableModel) ButterflySeniorTable.getModel();    
        }  
    }
//    public void disableTeamsTable() //only one table can be selected at a time
//    {
//        if(!BreaststrokeJuniorTable.getSelectionModel().isSelectionEmpty()) //If this table selection is not empty
//        {
//            BreaststrokeSeniorTable.setEnabled(false);
//            CrawlJuniorTable.setEnabled(false);
//            CrawlSeniorTable.setEnabled(false);
//            BackCrawlJuniorTable.setEnabled(false);
//            BackCrawlSeniorTable.setEnabled(false);
//            ButterflyJuniorTable.setEnabled(false);
//            ButterflySeniorTable.setEnabled(false);
//        }
//    }
    public int rowSelectedBreaststrokeJunior()
    {
        int index;
        

        if(BreaststrokeJuniorTable.getSelectionModel().isSelectionEmpty())
        {
            //test
            return -1;
        }

        index = BreaststrokeJuniorTable.getSelectedRow();
        return index;
    }
    
    
    public int RowSelectEconomy()
    {
        int index;
        

        if(ManageEconomyTable.getSelectionModel().isSelectionEmpty())
        {
            //test
            return -1;
        }

        index = ManageEconomyTable.getSelectedRow();
        return index;
    }
    
    public int rowSelected()
    {
        int index;
        

        if(MembersTable.getSelectionModel().isSelectionEmpty())
        {
            //test
            return -1;
        }

        index = MembersTable.getSelectedRow();
        return index;
    }

    public void mainMenu()
    {
        card.first(mainPanel);
    }

    public void memberInfo()
    {
        int i = rowSelected();

        if(i < 0)
        {
            System.out.print("No rows selected");
        }

        Member member = c.getMemberList().get(i);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/MM/yyyy");

        this.NameTFMI.setText(member.getName());
        this.EmailAddressTFMI.setText(member.getEmailAddress());
        this.AddressTFMI.setText(member.getAddress());
        this.CityTFMI.setText(member.getCity());
        this.ZipCodeTFMI.setText(Integer.toString(member.getZipCode()));
        this.DateOfBirthTFMI.setText(member.getDateOfBirth().format(formatter));
        this.PhoneNumberTFMI.setText(Long.toString(member.getPhoneNumber()));

        this.ActivityStatusMI.setText(member.getActivityStatusString());
        this.MemberIDMI.setText(Integer.toString(member.getMemberID()));
        this.MemberTypeMI.setText(member.getCompetitiveSwimmerString());
        this.DateOfJoiningMI.setText(member.getDateOfJoining().format(formatter));

        this.ArrearsBalanceMI.setText(formatLongToString(member.getArrearsBalance()));
        this.NextPaymentDateMI.setText(member.getNextPaymentDate().format(formatter));
        this.MembershipPriceMI.setText(formatLongToString(member.getMembershipPrice()));
        
        
//        model = (DefaultTableModel) TeamMembershipTable.getModel();
//
//        Object rowData[] = new Object[4];
//        
//        for(int n = 0; n < member.getTeamMemberships().size(); ++n)
//        {
//            rowData[0] = member.getTeamMemberships().get(i).getTeamName();
//        rowData[1] = member.getTeamMemberships().get(i).getSwimmingStyle();
//        rowData[2] = member.getTeamMemberships().get(i).//getDateOfJoining;
//        rowData[3] = member.getTeamMemberships().get(i).//getDateOfLeaving;
//        }
        

    }
    

    public void EconMemInfo()
    {
        int i = RowSelectEconomy();
        
        if(i < 0)
        {
            System.out.print("No rows selected");
        }
        Member member = c.getMemberList().get(i);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/MM/yyyy");

        this.NameTFMI.setText(member.getName());
        this.EmailAddressTFMI.setText(member.getEmailAddress());
        this.AddressTFMI.setText(member.getAddress());
        this.CityTFMI.setText(member.getCity());
        this.ZipCodeTFMI.setText(Integer.toString(member.getZipCode()));
        this.DateOfBirthTFMI.setText(member.getDateOfBirth().format(formatter));
        this.PhoneNumberTFMI.setText(Long.toString(member.getPhoneNumber()));

        this.ActivityStatusMI.setText(member.getActivityStatusString());
        this.MemberTypeMI.setText(Integer.toString(member.getMemberID()));
        this.MemberTypeMI.setText(member.getCompetitiveSwimmerString());
        this.DateOfJoiningMI.setText(member.getDateOfJoining().format(formatter));

        this.ArrearsBalanceMI.setText(formatLongToString(member.getArrearsBalance()));
        this.NextPaymentDateMI.setText(member.getNextPaymentDate().format(formatter));
        this.MembershipPriceMI.setText(formatLongToString(member.getMembershipPrice()));
     
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch(ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ActivityStatus;
    private javax.swing.JLabel ActivityStatusMI;
    private javax.swing.JButton AddNewTeamMember;
    private javax.swing.JLabel Address;
    private javax.swing.JLabel Address1;
    private javax.swing.JTextField AddressTF;
    private javax.swing.JTextField AddressTFMI;
    private javax.swing.JLabel ArrearsBalance;
    private javax.swing.JLabel ArrearsBalanceMI;
    private javax.swing.JLabel BackCrawl;
    private javax.swing.JLabel BackCrawl1;
    private javax.swing.JTable BackCrawlJuniorTable;
    private javax.swing.JRadioButton BackCrawlRB;
    private javax.swing.JTable BackCrawlSeniorTable;
    private javax.swing.JRadioButton BreastStrokeRB;
    private javax.swing.JLabel Breaststroke;
    private javax.swing.JLabel Breaststroke1;
    private javax.swing.JTable BreaststrokeJuniorTable;
    private javax.swing.JTable BreaststrokeSeniorTable;
    private javax.swing.JLabel Butterfly;
    private javax.swing.JLabel Butterfly1;
    private javax.swing.JTable ButterflyJuniorTable;
    private javax.swing.JRadioButton ButterflyRB;
    private javax.swing.JTable ButterflySeniorTable;
    private javax.swing.JButton CancelMembership;
    private javax.swing.JLabel ChooseJorS;
    private javax.swing.JLabel ChooseSwimmingstyle;
    private javax.swing.JLabel ChosenMemberName;
    private javax.swing.JLabel City;
    private javax.swing.JLabel City1;
    private javax.swing.JTextField CityTF;
    private javax.swing.JTextField CityTFMI;
    private javax.swing.JButton ComfirmChangesMI;
    private javax.swing.JButton ConfirmAndCreateTeam;
    private javax.swing.JButton ConfirmChanges;
    private javax.swing.JLabel Crawl;
    private javax.swing.JLabel Crawl1;
    private javax.swing.JTable CrawlJuniorTable;
    private javax.swing.JRadioButton CrawlRB;
    private javax.swing.JTable CrawlSeniorTable;
    private javax.swing.JPanel CreateANewTeam;
    private javax.swing.JButton CreateTeam;
    private javax.swing.JLabel DateOfBirth;
    private javax.swing.JLabel DateOfBirth1;
    private javax.swing.JTextField DateOfBirthTF;
    private javax.swing.JTextField DateOfBirthTFMI;
    private javax.swing.JLabel DateOfJoing;
    private javax.swing.JLabel DateOfJoiningMI;
    private javax.swing.JLabel DelfinenSv√∏mmeklub;
    private javax.swing.JLabel Economy;
    private javax.swing.JPanel EconomyManage;
    private javax.swing.JScrollPane EconomyScrollPane;
    private javax.swing.JLabel EligTournamentsParticipants;
    private javax.swing.JLabel EmailAddress;
    private javax.swing.JLabel EmailAddress1;
    private javax.swing.JTextField EmailAddressTF;
    private javax.swing.JTextField EmailAddressTFMI;
    private javax.swing.JScrollPane JuniorBackCrawlTable;
    private javax.swing.JScrollPane JuniorBreaststrokeTable;
    private javax.swing.JScrollPane JuniorButterflyTable;
    private javax.swing.JScrollPane JuniorCrawlTable;
    private javax.swing.JRadioButton JuniorRB;
    private javax.swing.JLabel JuniorTeams;
    private javax.swing.JPanel MainMenu;
    private javax.swing.JButton MainMenu1;
    private javax.swing.JButton MainMenu2;
    private javax.swing.JButton MainMenu3;
    private javax.swing.JButton MainMenu4;
    private javax.swing.JButton MainMenu5;
    private javax.swing.JButton MainMenu6;
    private javax.swing.JButton MainMenu7;
    private javax.swing.JButton MainMenu8;
    private javax.swing.JLabel ManMembers;
    private javax.swing.JButton ManageEconomy;
    private javax.swing.JTable ManageEconomyTable;
    private javax.swing.JPanel ManageMember;
    private javax.swing.JButton ManageMembers;
    private javax.swing.JButton ManageTeams;
    private javax.swing.JLabel MemberID;
    private javax.swing.JLabel MemberIDMI;
    private javax.swing.JButton MemberInfo;
    private javax.swing.JButton MemberInfo1;
    private javax.swing.JPanel MemberInformation;
    private javax.swing.JLabel MemberType;
    private javax.swing.JLabel MemberTypeMI;
    private javax.swing.JTable MembersTable;
    private javax.swing.JLabel MembershipPrice;
    private javax.swing.JLabel MembershipPriceMI;
    private javax.swing.JLabel Name;
    private javax.swing.JLabel Name1;
    private javax.swing.JTextField NameTF;
    private javax.swing.JTextField NameTFMI;
    private javax.swing.JLabel NextPaymentDate;
    private javax.swing.JLabel NextPaymentDateMI;
    private javax.swing.JLabel PhoneNumber1;
    private javax.swing.JTextField PhoneNumberTF;
    private javax.swing.JTextField PhoneNumberTFMI;
    private javax.swing.JLabel Phonenumber;
    private javax.swing.JButton RegNewMember;
    private javax.swing.JButton RegisterArrearAsPaid;
    private javax.swing.JPanel RegisterNewMember;
    private javax.swing.JButton RegisterNewMember1;
    private javax.swing.JButton RegisterThisYearPayment;
    private javax.swing.JButton RemoveFromTeam;
    private javax.swing.JButton Reset;
    private javax.swing.JButton SaveMembers;
    private javax.swing.JRadioButton Senior;
    private javax.swing.JScrollPane SeniorBackCrawlTable;
    private javax.swing.JScrollPane SeniorBreaststrokeTable;
    private javax.swing.JScrollPane SeniorButterflyTable;
    private javax.swing.JScrollPane SeniorCrawlTable;
    private javax.swing.ButtonGroup SeniorOrJuniorGroup;
    private javax.swing.JLabel SeniorTeams;
    private javax.swing.JPanel SpecificTeam;
    private javax.swing.JLabel SpecificTeamName;
    private javax.swing.JScrollPane SpecificTeamTScroll;
    private javax.swing.JTable SpecificTeamTable;
    private javax.swing.ButtonGroup SwimmingStyleGroup;
    private javax.swing.JLabel TeamMembership;
    private javax.swing.JTable TeamMembershipTable;
    private javax.swing.JLabel TeamName;
    private javax.swing.JTextField TeamNameTF;
    private javax.swing.JLabel TeamTrainer;
    private javax.swing.JLabel TeamTrainerName;
    private javax.swing.JPanel Teams;
    private javax.swing.JCheckBox TournamentEligibilityCB;
    private javax.swing.JLabel TournamentParticipants;
    private javax.swing.JTable TournamentsParticipansTable;
    private javax.swing.JPanel TournamentsParticipants;
    private javax.swing.JTable TournamentsParticipantsTable;
    private javax.swing.JLabel TrainerName;
    private javax.swing.JTextField TrainerNameTF;
    private javax.swing.JButton ViewTeam;
    private javax.swing.JButton ViewTourParticipants;
    private javax.swing.JLabel ZipCode;
    private javax.swing.JLabel ZipCode1;
    private javax.swing.JTextField ZipCodeTF;
    private javax.swing.JTextField ZipCodeTFMI;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
}
